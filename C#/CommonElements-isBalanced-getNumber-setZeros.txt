using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace InterviewFunctions
{
    class Program
    {
        static void Main(string[] args)
        {
            #region isBalanced test
            //var balancedSmiley = isBalanced(":(()asvbasdfas");
            //Console.WriteLine(balancedSmiley);
            #endregion

            #region commonElements test 
            //int[] l1 = new int[] { 1, 3, 5, 6, 7 };
            //int[] l2 = new int[] { 1, 2, 3, 4, 6 };
            //var commonElement = commonElements(l1, l2);
            //foreach (var i in commonElement)
            //{
            //    Console.WriteLine(i.ToString());
            //}
            //Console.ReadLine();
            #endregion

            
            
            Lab49.someFunc();

        }

        static string isBalanced(string message)
        {
            int minOpen = 0;
            int maxOpen = 0;

            for(var i = 0; i < message.Length; i++)
            {
                if(message[i] == '(')
                {
                    maxOpen += 1;

                    if( i == 0 || message[i-1] != ':')
                    {
                        minOpen += 1;
                    }                
                }
                else if(message[i] == ')')
                {
                    minOpen = Math.Max(0, minOpen - 1);
                    if(i == 0 || message[i-1] != ':')
                    {
                        maxOpen -= 1;
                        if(maxOpen < 0)
                        {
                            break;
                        }
                    }
                }
            }
            if(maxOpen >= 0 && minOpen == 0)
            {
                return "YES";
            }
            else { 
                return "NO";
            }
        }

        static List<int> commonElements(int[] list1, int[] list2)
        {
            var p1 = 0;
            var p2 = 0;
            var result = new List<int>();

            while (p1< list1.Length && p2< list2.Length)
            {
                if (list1[p1] == list2[p2])
                {
                    result.Add(list1[p1]);
                    p1++;
                    p2++;

                }
                else if(list1[p1] > list2[p2])
                {
                    p2++;
                }
                else
                {
                    p1++;
                }
            }

            return result;
        }

        static int getNumber(string number)
        {
            int result = 0;
            foreach(var i in number)
            {
                Console.WriteLine(i.GetType());
                result = result * 10 + i - '0';
                Console.WriteLine(result.GetType());
            }
            return result;
        }


        //algorithm if element in an MxN matrix is 0, its entire row and column is set to 0
        static void setZeros(int[][] matrix)
        {
            int[] row = new int[matrix.Length];
            int[] column = new int[matrix[0].Length];
            //store the row and column index with value 0
            for (int i = 0; i < matrix.Length; i++)
            {
                for (int j = 0; j < matrix[0].Length; j++)
                {
                    if (matrix[i][j] == 0)
                    {
                        row[i] = 1;
                        column[j] = 1;
                    }
                }
            }

            //set arr[i][j] to 0 if either row i or column j has a 0
            for (int i = 0; i < matrix.Length; i++)
            {
                for (int j = 0; j < matrix[0].Length; j++)
                {
                    if ((row[i] == 1 || column[j] == 1))
                    {
                        matrix[i][j] = 0;
                    }
                }
            }
        }


    }
}
